// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v4.0.30319.17020
//


/// <remarks/>
/// <remarks>
///Special web-service interface to Flightwise flight tracking data.  Access to this data is restricted and provided only upon acceptance of required licenses.
///</remarks>

[System.Web.Services.WebServiceBinding(Name="PlaneXMLv1Soap", Namespace="http://planexml.flightwise.com/ws")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PlaneXMLv1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback FlightPlansOperationCompleted;
    
    private System.Threading.SendOrPostCallback FlightStatusOperationCompleted;
    
    private System.Threading.SendOrPostCallback FlightInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback FlightPathOperationCompleted;
    
    private System.Threading.SendOrPostCallback RegistrationOperationCompleted;
    
    private System.Threading.SendOrPostCallback SearchOperationCompleted;
    
    private System.Threading.SendOrPostCallback PhotoListOperationCompleted;
    
    private System.Threading.SendOrPostCallback RecentFlightsOperationCompleted;
    
    private System.Threading.SendOrPostCallback AirportsNearOperationCompleted;
    
    private System.Threading.SendOrPostCallback AirportsNearConventionalOperationCompleted;
    
    private System.Threading.SendOrPostCallback AirportInfoOperationCompleted;
    
    private System.Threading.SendOrPostCallback FlightsNearOperationCompleted;
    
    public PlaneXMLv1() {
        this.Url = "http://planexml.flightwise.com/ws/PlaneXMLv1.asmx";
    }
    
    public event FlightPlansCompletedEventHandler FlightPlansCompleted;
    
    public event FlightStatusCompletedEventHandler FlightStatusCompleted;
    
    public event FlightInfoCompletedEventHandler FlightInfoCompleted;
    
    public event FlightPathCompletedEventHandler FlightPathCompleted;
    
    public event RegistrationCompletedEventHandler RegistrationCompleted;
    
    public event SearchCompletedEventHandler SearchCompleted;
    
    public event PhotoListCompletedEventHandler PhotoListCompleted;
    
    public event RecentFlightsCompletedEventHandler RecentFlightsCompleted;
    
    public event AirportsNearCompletedEventHandler AirportsNearCompleted;
    
    public event AirportsNearConventionalCompletedEventHandler AirportsNearConventionalCompleted;
    
    public event AirportInfoCompletedEventHandler AirportInfoCompleted;
    
    public event FlightsNearCompletedEventHandler FlightsNearCompleted;
    
    /// <remarks>
///Returns a list of flight plans based on the specified query.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/FlightPlans", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public FlightPlan[] FlightPlans(string query) {
        object[] results = this.Invoke("FlightPlans", new object[] {
                    query});
        return ((FlightPlan[])(results[0]));
    }
    
    public System.IAsyncResult BeginFlightPlans(string query, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlightPlans", new object[] {
                    query}, callback, asyncState);
    }
    
    public FlightPlan[] EndFlightPlans(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((FlightPlan[])(results[0]));
    }
    
    public void FlightPlansAsync(string query) {
        this.FlightPlansAsync(query, null);
    }
    
    public void FlightPlansAsync(string query, object userState) {
        if ((this.FlightPlansOperationCompleted == null)) {
            this.FlightPlansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightPlansCompleted);
        }
        this.InvokeAsync("FlightPlans", new object[] {
                    query}, this.FlightPlansOperationCompleted, userState);
    }
    
    private void OnFlightPlansCompleted(object arg) {
        if ((this.FlightPlansCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FlightPlansCompleted(this, new FlightPlansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns dynamic (changing) data on a flight.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/FlightStatus", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("FIDynamic", IsNullable=true)]
    public FIDynamic FlightStatus(string ident) {
        object[] results = this.Invoke("FlightStatus", new object[] {
                    ident});
        return ((FIDynamic)(results[0]));
    }
    
    public System.IAsyncResult BeginFlightStatus(string ident, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlightStatus", new object[] {
                    ident}, callback, asyncState);
    }
    
    public FIDynamic EndFlightStatus(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((FIDynamic)(results[0]));
    }
    
    public void FlightStatusAsync(string ident) {
        this.FlightStatusAsync(ident, null);
    }
    
    public void FlightStatusAsync(string ident, object userState) {
        if ((this.FlightStatusOperationCompleted == null)) {
            this.FlightStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightStatusCompleted);
        }
        this.InvokeAsync("FlightStatus", new object[] {
                    ident}, this.FlightStatusOperationCompleted, userState);
    }
    
    private void OnFlightStatusCompleted(object arg) {
        if ((this.FlightStatusCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FlightStatusCompleted(this, new FlightStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns complete flight (static and dynamic) data on a specific flight.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/FlightInfo", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("FIStatic", IsNullable=true)]
    public FIStatic FlightInfo(string ident, bool IncludeDetails, bool IncludeDynamicInfo) {
        object[] results = this.Invoke("FlightInfo", new object[] {
                    ident,
                    IncludeDetails,
                    IncludeDynamicInfo});
        return ((FIStatic)(results[0]));
    }
    
    public System.IAsyncResult BeginFlightInfo(string ident, bool IncludeDetails, bool IncludeDynamicInfo, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlightInfo", new object[] {
                    ident,
                    IncludeDetails,
                    IncludeDynamicInfo}, callback, asyncState);
    }
    
    public FIStatic EndFlightInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((FIStatic)(results[0]));
    }
    
    public void FlightInfoAsync(string ident, bool IncludeDetails, bool IncludeDynamicInfo) {
        this.FlightInfoAsync(ident, IncludeDetails, IncludeDynamicInfo, null);
    }
    
    public void FlightInfoAsync(string ident, bool IncludeDetails, bool IncludeDynamicInfo, object userState) {
        if ((this.FlightInfoOperationCompleted == null)) {
            this.FlightInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightInfoCompleted);
        }
        this.InvokeAsync("FlightInfo", new object[] {
                    ident,
                    IncludeDetails,
                    IncludeDynamicInfo}, this.FlightInfoOperationCompleted, userState);
    }
    
    private void OnFlightInfoCompleted(object arg) {
        if ((this.FlightInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FlightInfoCompleted(this, new FlightInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns the complete flight path data for a flight.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/FlightPath", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public adsPosition[] FlightPath(string ident) {
        object[] results = this.Invoke("FlightPath", new object[] {
                    ident});
        return ((adsPosition[])(results[0]));
    }
    
    public System.IAsyncResult BeginFlightPath(string ident, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlightPath", new object[] {
                    ident}, callback, asyncState);
    }
    
    public adsPosition[] EndFlightPath(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((adsPosition[])(results[0]));
    }
    
    public void FlightPathAsync(string ident) {
        this.FlightPathAsync(ident, null);
    }
    
    public void FlightPathAsync(string ident, object userState) {
        if ((this.FlightPathOperationCompleted == null)) {
            this.FlightPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightPathCompleted);
        }
        this.InvokeAsync("FlightPath", new object[] {
                    ident}, this.FlightPathOperationCompleted, userState);
    }
    
    private void OnFlightPathCompleted(object arg) {
        if ((this.FlightPathCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FlightPathCompleted(this, new FlightPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns the registration information on an aircraft.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/Registration", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: System.Xml.Serialization.XmlElementAttribute("Registry", Namespace="http://fboweb.com/ws", IsNullable=true)]
    public registry Registration(string ident) {
        object[] results = this.Invoke("Registration", new object[] {
                    ident});
        return ((registry)(results[0]));
    }
    
    public System.IAsyncResult BeginRegistration(string ident, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Registration", new object[] {
                    ident}, callback, asyncState);
    }
    
    public registry EndRegistration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((registry)(results[0]));
    }
    
    public void RegistrationAsync(string ident) {
        this.RegistrationAsync(ident, null);
    }
    
    public void RegistrationAsync(string ident, object userState) {
        if ((this.RegistrationOperationCompleted == null)) {
            this.RegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegistrationCompleted);
        }
        this.InvokeAsync("Registration", new object[] {
                    ident}, this.RegistrationOperationCompleted, userState);
    }
    
    private void OnRegistrationCompleted(object arg) {
        if ((this.RegistrationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RegistrationCompleted(this, new RegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Searches for flights based on the specified query.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/Search", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public FIStatic[] Search(string query, bool IncludeDetails, bool IncludeDynamicInfo, long page) {
        object[] results = this.Invoke("Search", new object[] {
                    query,
                    IncludeDetails,
                    IncludeDynamicInfo,
                    page});
        return ((FIStatic[])(results[0]));
    }
    
    public System.IAsyncResult BeginSearch(string query, bool IncludeDetails, bool IncludeDynamicInfo, long page, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Search", new object[] {
                    query,
                    IncludeDetails,
                    IncludeDynamicInfo,
                    page}, callback, asyncState);
    }
    
    public FIStatic[] EndSearch(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((FIStatic[])(results[0]));
    }
    
    public void SearchAsync(string query, bool IncludeDetails, bool IncludeDynamicInfo, long page) {
        this.SearchAsync(query, IncludeDetails, IncludeDynamicInfo, page, null);
    }
    
    public void SearchAsync(string query, bool IncludeDetails, bool IncludeDynamicInfo, long page, object userState) {
        if ((this.SearchOperationCompleted == null)) {
            this.SearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCompleted);
        }
        this.InvokeAsync("Search", new object[] {
                    query,
                    IncludeDetails,
                    IncludeDynamicInfo,
                    page}, this.SearchOperationCompleted, userState);
    }
    
    private void OnSearchCompleted(object arg) {
        if ((this.SearchCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SearchCompleted(this, new SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns a list of available photos of this aircraft.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/PhotoList", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Photo[] PhotoList(string ident) {
        object[] results = this.Invoke("PhotoList", new object[] {
                    ident});
        return ((Photo[])(results[0]));
    }
    
    public System.IAsyncResult BeginPhotoList(string ident, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("PhotoList", new object[] {
                    ident}, callback, asyncState);
    }
    
    public Photo[] EndPhotoList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Photo[])(results[0]));
    }
    
    public void PhotoListAsync(string ident) {
        this.PhotoListAsync(ident, null);
    }
    
    public void PhotoListAsync(string ident, object userState) {
        if ((this.PhotoListOperationCompleted == null)) {
            this.PhotoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPhotoListCompleted);
        }
        this.InvokeAsync("PhotoList", new object[] {
                    ident}, this.PhotoListOperationCompleted, userState);
    }
    
    private void OnPhotoListCompleted(object arg) {
        if ((this.PhotoListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PhotoListCompleted(this, new PhotoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Searches past flight history based on the specified query.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/RecentFlights", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public PastFlight[] RecentFlights(string ident) {
        object[] results = this.Invoke("RecentFlights", new object[] {
                    ident});
        return ((PastFlight[])(results[0]));
    }
    
    public System.IAsyncResult BeginRecentFlights(string ident, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RecentFlights", new object[] {
                    ident}, callback, asyncState);
    }
    
    public PastFlight[] EndRecentFlights(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((PastFlight[])(results[0]));
    }
    
    public void RecentFlightsAsync(string ident) {
        this.RecentFlightsAsync(ident, null);
    }
    
    public void RecentFlightsAsync(string ident, object userState) {
        if ((this.RecentFlightsOperationCompleted == null)) {
            this.RecentFlightsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecentFlightsCompleted);
        }
        this.InvokeAsync("RecentFlights", new object[] {
                    ident}, this.RecentFlightsOperationCompleted, userState);
    }
    
    private void OnRecentFlightsCompleted(object arg) {
        if ((this.RecentFlightsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RecentFlightsCompleted(this, new RecentFlightsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Searches for airports within the specified radius of lat, lon.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/AirportsNear", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Airport[] AirportsNear(double lat, double lon, long radius) {
        object[] results = this.Invoke("AirportsNear", new object[] {
                    lat,
                    lon,
                    radius});
        return ((Airport[])(results[0]));
    }
    
    public System.IAsyncResult BeginAirportsNear(double lat, double lon, long radius, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AirportsNear", new object[] {
                    lat,
                    lon,
                    radius}, callback, asyncState);
    }
    
    public Airport[] EndAirportsNear(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Airport[])(results[0]));
    }
    
    public void AirportsNearAsync(double lat, double lon, long radius) {
        this.AirportsNearAsync(lat, lon, radius, null);
    }
    
    public void AirportsNearAsync(double lat, double lon, long radius, object userState) {
        if ((this.AirportsNearOperationCompleted == null)) {
            this.AirportsNearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirportsNearCompleted);
        }
        this.InvokeAsync("AirportsNear", new object[] {
                    lat,
                    lon,
                    radius}, this.AirportsNearOperationCompleted, userState);
    }
    
    private void OnAirportsNearCompleted(object arg) {
        if ((this.AirportsNearCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AirportsNearCompleted(this, new AirportsNearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Searches for airports within the specified radius of lat, lon.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/AirportsNearConventional", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Airport[] AirportsNearConventional(double lat, double lon, long radius) {
        object[] results = this.Invoke("AirportsNearConventional", new object[] {
                    lat,
                    lon,
                    radius});
        return ((Airport[])(results[0]));
    }
    
    public System.IAsyncResult BeginAirportsNearConventional(double lat, double lon, long radius, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AirportsNearConventional", new object[] {
                    lat,
                    lon,
                    radius}, callback, asyncState);
    }
    
    public Airport[] EndAirportsNearConventional(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Airport[])(results[0]));
    }
    
    public void AirportsNearConventionalAsync(double lat, double lon, long radius) {
        this.AirportsNearConventionalAsync(lat, lon, radius, null);
    }
    
    public void AirportsNearConventionalAsync(double lat, double lon, long radius, object userState) {
        if ((this.AirportsNearConventionalOperationCompleted == null)) {
            this.AirportsNearConventionalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirportsNearConventionalCompleted);
        }
        this.InvokeAsync("AirportsNearConventional", new object[] {
                    lat,
                    lon,
                    radius}, this.AirportsNearConventionalOperationCompleted, userState);
    }
    
    private void OnAirportsNearConventionalCompleted(object arg) {
        if ((this.AirportsNearConventionalCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AirportsNearConventionalCompleted(this, new AirportsNearConventionalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns the specific airport's information.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/AirportInfo", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public Airport[] AirportInfo(string ident) {
        object[] results = this.Invoke("AirportInfo", new object[] {
                    ident});
        return ((Airport[])(results[0]));
    }
    
    public System.IAsyncResult BeginAirportInfo(string ident, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AirportInfo", new object[] {
                    ident}, callback, asyncState);
    }
    
    public Airport[] EndAirportInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Airport[])(results[0]));
    }
    
    public void AirportInfoAsync(string ident) {
        this.AirportInfoAsync(ident, null);
    }
    
    public void AirportInfoAsync(string ident, object userState) {
        if ((this.AirportInfoOperationCompleted == null)) {
            this.AirportInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAirportInfoCompleted);
        }
        this.InvokeAsync("AirportInfo", new object[] {
                    ident}, this.AirportInfoOperationCompleted, userState);
    }
    
    private void OnAirportInfoCompleted(object arg) {
        if ((this.AirportInfoCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AirportInfoCompleted(this, new AirportInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks>
///Returns a list of active flights near the specified lat/lon and radius.
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://planexml.flightwise.com/ws/FlightsNear", RequestNamespace="http://planexml.flightwise.com/ws", ResponseNamespace="http://planexml.flightwise.com/ws", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public FIStatic[] FlightsNear(double lat, double lon, long radius, bool IncludeDetails) {
        object[] results = this.Invoke("FlightsNear", new object[] {
                    lat,
                    lon,
                    radius,
                    IncludeDetails});
        return ((FIStatic[])(results[0]));
    }
    
    public System.IAsyncResult BeginFlightsNear(double lat, double lon, long radius, bool IncludeDetails, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FlightsNear", new object[] {
                    lat,
                    lon,
                    radius,
                    IncludeDetails}, callback, asyncState);
    }
    
    public FIStatic[] EndFlightsNear(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((FIStatic[])(results[0]));
    }
    
    public void FlightsNearAsync(double lat, double lon, long radius, bool IncludeDetails) {
        this.FlightsNearAsync(lat, lon, radius, IncludeDetails, null);
    }
    
    public void FlightsNearAsync(double lat, double lon, long radius, bool IncludeDetails, object userState) {
        if ((this.FlightsNearOperationCompleted == null)) {
            this.FlightsNearOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlightsNearCompleted);
        }
        this.InvokeAsync("FlightsNear", new object[] {
                    lat,
                    lon,
                    radius,
                    IncludeDetails}, this.FlightsNearOperationCompleted, userState);
    }
    
    private void OnFlightsNearCompleted(object arg) {
        if ((this.FlightsNearCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FlightsNearCompleted(this, new FlightsNearCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class FlightPlan {
    
    private long iDField;
    
    private string identField;
    
    private string typeField;
    
    private string deptField;
    
    private string destField;
    
    private long fileTimeField;
    
    private long departureTimeField;
    
    private long eTAField;
    
    private string routeField;
    
    private string centerField;
    
    private int statusField;
    
    private short departureTimezoneOffsetField;
    
    private short destinationTimezoneOffsetField;
    
    /// <remarks/>
    public long ID {
        get {
            return this.iDField;
        }
        set {
            this.iDField = value;
        }
    }
    
    /// <remarks/>
    public string Ident {
        get {
            return this.identField;
        }
        set {
            this.identField = value;
        }
    }
    
    /// <remarks/>
    public string Type {
        get {
            return this.typeField;
        }
        set {
            this.typeField = value;
        }
    }
    
    /// <remarks/>
    public string Dept {
        get {
            return this.deptField;
        }
        set {
            this.deptField = value;
        }
    }
    
    /// <remarks/>
    public string Dest {
        get {
            return this.destField;
        }
        set {
            this.destField = value;
        }
    }
    
    /// <remarks/>
    public long FileTime {
        get {
            return this.fileTimeField;
        }
        set {
            this.fileTimeField = value;
        }
    }
    
    /// <remarks/>
    public long DepartureTime {
        get {
            return this.departureTimeField;
        }
        set {
            this.departureTimeField = value;
        }
    }
    
    /// <remarks/>
    public long ETA {
        get {
            return this.eTAField;
        }
        set {
            this.eTAField = value;
        }
    }
    
    /// <remarks/>
    public string Route {
        get {
            return this.routeField;
        }
        set {
            this.routeField = value;
        }
    }
    
    /// <remarks/>
    public string Center {
        get {
            return this.centerField;
        }
        set {
            this.centerField = value;
        }
    }
    
    /// <remarks/>
    public int Status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public short DepartureTimezoneOffset {
        get {
            return this.departureTimezoneOffsetField;
        }
        set {
            this.departureTimezoneOffsetField = value;
        }
    }
    
    /// <remarks/>
    public short DestinationTimezoneOffset {
        get {
            return this.destinationTimezoneOffsetField;
        }
        set {
            this.destinationTimezoneOffsetField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class FIDynamic {
    
    private string identField1;
    
    private long timeStampField;
    
    private long arrivalMinsField;
    
    private long altField;
    
    private string gSField;
    
    private FlightStatusType statusField1;
    
    private double latField;
    
    private double lonField;
    
    private long courseField;
    
    private long climbDescendField;
    
    private long staticRefreshField;
    
    private short destTimezoneOffsetField;
    
    private string destDSTField;
    
    /// <remarks/>
    public string Ident {
        get {
            return this.identField1;
        }
        set {
            this.identField1 = value;
        }
    }
    
    /// <remarks/>
    public long TimeStamp {
        get {
            return this.timeStampField;
        }
        set {
            this.timeStampField = value;
        }
    }
    
    /// <remarks/>
    public long ArrivalMins {
        get {
            return this.arrivalMinsField;
        }
        set {
            this.arrivalMinsField = value;
        }
    }
    
    /// <remarks/>
    public long Alt {
        get {
            return this.altField;
        }
        set {
            this.altField = value;
        }
    }
    
    /// <remarks/>
    public string GS {
        get {
            return this.gSField;
        }
        set {
            this.gSField = value;
        }
    }
    
    /// <remarks/>
    public FlightStatusType Status {
        get {
            return this.statusField1;
        }
        set {
            this.statusField1 = value;
        }
    }
    
    /// <remarks/>
    public double Lat {
        get {
            return this.latField;
        }
        set {
            this.latField = value;
        }
    }
    
    /// <remarks/>
    public double Lon {
        get {
            return this.lonField;
        }
        set {
            this.lonField = value;
        }
    }
    
    /// <remarks/>
    public long Course {
        get {
            return this.courseField;
        }
        set {
            this.courseField = value;
        }
    }
    
    /// <remarks/>
    public long ClimbDescend {
        get {
            return this.climbDescendField;
        }
        set {
            this.climbDescendField = value;
        }
    }
    
    /// <remarks/>
    public long StaticRefresh {
        get {
            return this.staticRefreshField;
        }
        set {
            this.staticRefreshField = value;
        }
    }
    
    /// <remarks/>
    public short DestTimezoneOffset {
        get {
            return this.destTimezoneOffsetField;
        }
        set {
            this.destTimezoneOffsetField = value;
        }
    }
    
    /// <remarks/>
    public string DestDST {
        get {
            return this.destDSTField;
        }
        set {
            this.destDSTField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public enum FlightStatusType {
    
    /// <remarks/>
    Landed,
    
    /// <remarks/>
    Active,
    
    /// <remarks/>
    Timeout,
    
    /// <remarks/>
    Unknown,
    
    /// <remarks/>
    Scheduled,
    
    /// <remarks/>
    Filed,
    
    /// <remarks/>
    Cancelled,
    
    /// <remarks/>
    Decontrolled,
    
    /// <remarks/>
    Controlled,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class FIStatic {
    
    private string identField3;
    
    private string primaryPhotoField;
    
    private string historyNumberField;
    
    private string radioCallField;
    
    private string bBOXField;
    
    private string ownerField;
    
    private FlightStatusType statusField2;
    
    private string indexField;
    
    private string departureTimeField1;
    
    private string deptField1;
    
    private string deptNameField;
    
    private string deptLatField;
    
    private string deptLonField;
    
    private string destField1;
    
    private string destNameField;
    
    private string destLatField;
    
    private string destLonField;
    
    private string arrivalTimeField;
    
    private string aCTypeField;
    
    private string aCTypeStringField;
    
    private string equipCodeField;
    
    private short vFRField;
    
    private short historicalField;
    
    private FIDynamic fIDynamicField1;
    
    private short deptTimezoneOffsetField;
    
    private string deptLocField;
    
    private string destLocField;
    
    private string deptDSTField;
    
    /// <remarks/>
    public string Ident {
        get {
            return this.identField3;
        }
        set {
            this.identField3 = value;
        }
    }
    
    /// <remarks/>
    public string PrimaryPhoto {
        get {
            return this.primaryPhotoField;
        }
        set {
            this.primaryPhotoField = value;
        }
    }
    
    /// <remarks/>
    public string HistoryNumber {
        get {
            return this.historyNumberField;
        }
        set {
            this.historyNumberField = value;
        }
    }
    
    /// <remarks/>
    public string RadioCall {
        get {
            return this.radioCallField;
        }
        set {
            this.radioCallField = value;
        }
    }
    
    /// <remarks/>
    public string BBOX {
        get {
            return this.bBOXField;
        }
        set {
            this.bBOXField = value;
        }
    }
    
    /// <remarks/>
    public string Owner {
        get {
            return this.ownerField;
        }
        set {
            this.ownerField = value;
        }
    }
    
    /// <remarks/>
    public FlightStatusType Status {
        get {
            return this.statusField2;
        }
        set {
            this.statusField2 = value;
        }
    }
    
    /// <remarks/>
    public string Index {
        get {
            return this.indexField;
        }
        set {
            this.indexField = value;
        }
    }
    
    /// <remarks/>
    public string DepartureTime {
        get {
            return this.departureTimeField1;
        }
        set {
            this.departureTimeField1 = value;
        }
    }
    
    /// <remarks/>
    public string Dept {
        get {
            return this.deptField1;
        }
        set {
            this.deptField1 = value;
        }
    }
    
    /// <remarks/>
    public string DeptName {
        get {
            return this.deptNameField;
        }
        set {
            this.deptNameField = value;
        }
    }
    
    /// <remarks/>
    public string DeptLat {
        get {
            return this.deptLatField;
        }
        set {
            this.deptLatField = value;
        }
    }
    
    /// <remarks/>
    public string DeptLon {
        get {
            return this.deptLonField;
        }
        set {
            this.deptLonField = value;
        }
    }
    
    /// <remarks/>
    public string Dest {
        get {
            return this.destField1;
        }
        set {
            this.destField1 = value;
        }
    }
    
    /// <remarks/>
    public string DestName {
        get {
            return this.destNameField;
        }
        set {
            this.destNameField = value;
        }
    }
    
    /// <remarks/>
    public string DestLat {
        get {
            return this.destLatField;
        }
        set {
            this.destLatField = value;
        }
    }
    
    /// <remarks/>
    public string DestLon {
        get {
            return this.destLonField;
        }
        set {
            this.destLonField = value;
        }
    }
    
    /// <remarks/>
    public string ArrivalTime {
        get {
            return this.arrivalTimeField;
        }
        set {
            this.arrivalTimeField = value;
        }
    }
    
    /// <remarks/>
    public string ACType {
        get {
            return this.aCTypeField;
        }
        set {
            this.aCTypeField = value;
        }
    }
    
    /// <remarks/>
    public string ACTypeString {
        get {
            return this.aCTypeStringField;
        }
        set {
            this.aCTypeStringField = value;
        }
    }
    
    /// <remarks/>
    public string EquipCode {
        get {
            return this.equipCodeField;
        }
        set {
            this.equipCodeField = value;
        }
    }
    
    /// <remarks/>
    public short VFR {
        get {
            return this.vFRField;
        }
        set {
            this.vFRField = value;
        }
    }
    
    /// <remarks/>
    public short Historical {
        get {
            return this.historicalField;
        }
        set {
            this.historicalField = value;
        }
    }
    
    /// <remarks/>
    public FIDynamic FIDynamic {
        get {
            return this.fIDynamicField1;
        }
        set {
            this.fIDynamicField1 = value;
        }
    }
    
    /// <remarks/>
    public short DeptTimezoneOffset {
        get {
            return this.deptTimezoneOffsetField;
        }
        set {
            this.deptTimezoneOffsetField = value;
        }
    }
    
    /// <remarks/>
    public string DeptLoc {
        get {
            return this.deptLocField;
        }
        set {
            this.deptLocField = value;
        }
    }
    
    /// <remarks/>
    public string DestLoc {
        get {
            return this.destLocField;
        }
        set {
            this.destLocField = value;
        }
    }
    
    /// <remarks/>
    public string DeptDST {
        get {
            return this.deptDSTField;
        }
        set {
            this.deptDSTField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class adsPosition {
    
    private string timestampField;
    
    private string latField1;
    
    private string lonField1;
    
    private string altField1;
    
    private string gsField;
    
    private string centerField1;
    
    private short climbDescendField1;
    
    /// <remarks/>
    public string timestamp {
        get {
            return this.timestampField;
        }
        set {
            this.timestampField = value;
        }
    }
    
    /// <remarks/>
    public string lat {
        get {
            return this.latField1;
        }
        set {
            this.latField1 = value;
        }
    }
    
    /// <remarks/>
    public string lon {
        get {
            return this.lonField1;
        }
        set {
            this.lonField1 = value;
        }
    }
    
    /// <remarks/>
    public string alt {
        get {
            return this.altField1;
        }
        set {
            this.altField1 = value;
        }
    }
    
    /// <remarks/>
    public string gs {
        get {
            return this.gsField;
        }
        set {
            this.gsField = value;
        }
    }
    
    /// <remarks/>
    public string center {
        get {
            return this.centerField1;
        }
        set {
            this.centerField1 = value;
        }
    }
    
    /// <remarks/>
    public short climbDescend {
        get {
            return this.climbDescendField1;
        }
        set {
            this.climbDescendField1 = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fboweb.com/ws")]
[System.Xml.Serialization.XmlRootAttribute("Registry", Namespace="http://fboweb.com/ws")]
public partial class registry {
    
    private int numEnginesField;
    
    private int engineTypeField;
    
    private int aircraftTypeField;
    
    private int numSeatsField;
    
    private int categoryField;
    
    private int avgCruiseSpeedField;
    
    private string serialNumberField;
    
    private string categoryTextField;
    
    private string engineTypeTextField;
    
    private string aircraftTypeTextField;
    
    private string regOwnerNameField;
    
    private string regOwnerAddress1Field;
    
    private string regOwnerAddress2Field;
    
    private string regOwnerCityField;
    
    private string regOwnerStateField;
    
    private string regOwnerZipField;
    
    private string acftMfgNameField;
    
    private string acftModelNameField;
    
    private string weightClassField;
    
    private string yearMfrField;
    
    /// <remarks/>
    public int NumEngines {
        get {
            return this.numEnginesField;
        }
        set {
            this.numEnginesField = value;
        }
    }
    
    /// <remarks/>
    public int EngineType {
        get {
            return this.engineTypeField;
        }
        set {
            this.engineTypeField = value;
        }
    }
    
    /// <remarks/>
    public int AircraftType {
        get {
            return this.aircraftTypeField;
        }
        set {
            this.aircraftTypeField = value;
        }
    }
    
    /// <remarks/>
    public int NumSeats {
        get {
            return this.numSeatsField;
        }
        set {
            this.numSeatsField = value;
        }
    }
    
    /// <remarks/>
    public int Category {
        get {
            return this.categoryField;
        }
        set {
            this.categoryField = value;
        }
    }
    
    /// <remarks/>
    public int AvgCruiseSpeed {
        get {
            return this.avgCruiseSpeedField;
        }
        set {
            this.avgCruiseSpeedField = value;
        }
    }
    
    /// <remarks/>
    public string SerialNumber {
        get {
            return this.serialNumberField;
        }
        set {
            this.serialNumberField = value;
        }
    }
    
    /// <remarks/>
    public string CategoryText {
        get {
            return this.categoryTextField;
        }
        set {
            this.categoryTextField = value;
        }
    }
    
    /// <remarks/>
    public string EngineTypeText {
        get {
            return this.engineTypeTextField;
        }
        set {
            this.engineTypeTextField = value;
        }
    }
    
    /// <remarks/>
    public string AircraftTypeText {
        get {
            return this.aircraftTypeTextField;
        }
        set {
            this.aircraftTypeTextField = value;
        }
    }
    
    /// <remarks/>
    public string RegOwnerName {
        get {
            return this.regOwnerNameField;
        }
        set {
            this.regOwnerNameField = value;
        }
    }
    
    /// <remarks/>
    public string RegOwnerAddress1 {
        get {
            return this.regOwnerAddress1Field;
        }
        set {
            this.regOwnerAddress1Field = value;
        }
    }
    
    /// <remarks/>
    public string RegOwnerAddress2 {
        get {
            return this.regOwnerAddress2Field;
        }
        set {
            this.regOwnerAddress2Field = value;
        }
    }
    
    /// <remarks/>
    public string RegOwnerCity {
        get {
            return this.regOwnerCityField;
        }
        set {
            this.regOwnerCityField = value;
        }
    }
    
    /// <remarks/>
    public string RegOwnerState {
        get {
            return this.regOwnerStateField;
        }
        set {
            this.regOwnerStateField = value;
        }
    }
    
    /// <remarks/>
    public string RegOwnerZip {
        get {
            return this.regOwnerZipField;
        }
        set {
            this.regOwnerZipField = value;
        }
    }
    
    /// <remarks/>
    public string AcftMfgName {
        get {
            return this.acftMfgNameField;
        }
        set {
            this.acftMfgNameField = value;
        }
    }
    
    /// <remarks/>
    public string AcftModelName {
        get {
            return this.acftModelNameField;
        }
        set {
            this.acftModelNameField = value;
        }
    }
    
    /// <remarks/>
    public string WeightClass {
        get {
            return this.weightClassField;
        }
        set {
            this.weightClassField = value;
        }
    }
    
    /// <remarks/>
    public string YearMfr {
        get {
            return this.yearMfrField;
        }
        set {
            this.yearMfrField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class Photo {
    
    private string keyField;
    
    private string identField7;
    
    private long dateUploadedField;
    
    private long dateTakenField;
    
    private double latField2;
    
    private double lonField2;
    
    private string airportField;
    
    private string descField;
    
    private short primaryField;
    
    /// <remarks/>
    public string Key {
        get {
            return this.keyField;
        }
        set {
            this.keyField = value;
        }
    }
    
    /// <remarks/>
    public string Ident {
        get {
            return this.identField7;
        }
        set {
            this.identField7 = value;
        }
    }
    
    /// <remarks/>
    public long DateUploaded {
        get {
            return this.dateUploadedField;
        }
        set {
            this.dateUploadedField = value;
        }
    }
    
    /// <remarks/>
    public long DateTaken {
        get {
            return this.dateTakenField;
        }
        set {
            this.dateTakenField = value;
        }
    }
    
    /// <remarks/>
    public double Lat {
        get {
            return this.latField2;
        }
        set {
            this.latField2 = value;
        }
    }
    
    /// <remarks/>
    public double Lon {
        get {
            return this.lonField2;
        }
        set {
            this.lonField2 = value;
        }
    }
    
    /// <remarks/>
    public string Airport {
        get {
            return this.airportField;
        }
        set {
            this.airportField = value;
        }
    }
    
    /// <remarks/>
    public string Desc {
        get {
            return this.descField;
        }
        set {
            this.descField = value;
        }
    }
    
    /// <remarks/>
    public short Primary {
        get {
            return this.primaryField;
        }
        set {
            this.primaryField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class PastFlight {
    
    private long indexField1;
    
    private string identField9;
    
    private string deptField2;
    
    private string destField2;
    
    private long departureTimeField2;
    
    private short departureTimezoneOffsetField1;
    
    private long arrivalTimeField1;
    
    private short arrivalTimezoneOffsetField;
    
    private string centerField2;
    
    private string aCTypeField1;
    
    private string equipCodeField1;
    
    private short statusField3;
    
    /// <remarks/>
    public long Index {
        get {
            return this.indexField1;
        }
        set {
            this.indexField1 = value;
        }
    }
    
    /// <remarks/>
    public string Ident {
        get {
            return this.identField9;
        }
        set {
            this.identField9 = value;
        }
    }
    
    /// <remarks/>
    public string Dept {
        get {
            return this.deptField2;
        }
        set {
            this.deptField2 = value;
        }
    }
    
    /// <remarks/>
    public string Dest {
        get {
            return this.destField2;
        }
        set {
            this.destField2 = value;
        }
    }
    
    /// <remarks/>
    public long DepartureTime {
        get {
            return this.departureTimeField2;
        }
        set {
            this.departureTimeField2 = value;
        }
    }
    
    /// <remarks/>
    public short DepartureTimezoneOffset {
        get {
            return this.departureTimezoneOffsetField1;
        }
        set {
            this.departureTimezoneOffsetField1 = value;
        }
    }
    
    /// <remarks/>
    public long ArrivalTime {
        get {
            return this.arrivalTimeField1;
        }
        set {
            this.arrivalTimeField1 = value;
        }
    }
    
    /// <remarks/>
    public short ArrivalTimezoneOffset {
        get {
            return this.arrivalTimezoneOffsetField;
        }
        set {
            this.arrivalTimezoneOffsetField = value;
        }
    }
    
    /// <remarks/>
    public string Center {
        get {
            return this.centerField2;
        }
        set {
            this.centerField2 = value;
        }
    }
    
    /// <remarks/>
    public string ACType {
        get {
            return this.aCTypeField1;
        }
        set {
            this.aCTypeField1 = value;
        }
    }
    
    /// <remarks/>
    public string EquipCode {
        get {
            return this.equipCodeField1;
        }
        set {
            this.equipCodeField1 = value;
        }
    }
    
    /// <remarks/>
    public short Status {
        get {
            return this.statusField3;
        }
        set {
            this.statusField3 = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://planexml.flightwise.com/ws")]
public partial class Airport {
    
    private string identField11;
    
    private string iCAOField;
    
    private string nameField;
    
    private string locationField;
    
    private double latField3;
    
    private double lonField3;
    
    private int elevField;
    
    private short gMTOffsetField;
    
    private short dSTField;
    
    private short towerField;
    
    /// <remarks/>
    public string Ident {
        get {
            return this.identField11;
        }
        set {
            this.identField11 = value;
        }
    }
    
    /// <remarks/>
    public string ICAO {
        get {
            return this.iCAOField;
        }
        set {
            this.iCAOField = value;
        }
    }
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public string Location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    public double Lat {
        get {
            return this.latField3;
        }
        set {
            this.latField3 = value;
        }
    }
    
    /// <remarks/>
    public double Lon {
        get {
            return this.lonField3;
        }
        set {
            this.lonField3 = value;
        }
    }
    
    /// <remarks/>
    public int Elev {
        get {
            return this.elevField;
        }
        set {
            this.elevField = value;
        }
    }
    
    /// <remarks/>
    public short GMTOffset {
        get {
            return this.gMTOffsetField;
        }
        set {
            this.gMTOffsetField = value;
        }
    }
    
    /// <remarks/>
    public short DST {
        get {
            return this.dSTField;
        }
        set {
            this.dSTField = value;
        }
    }
    
    /// <remarks/>
    public short Tower {
        get {
            return this.towerField;
        }
        set {
            this.towerField = value;
        }
    }
}

public partial class FlightPlansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FlightPlansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public FlightPlan[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((FlightPlan[])(this.results[0]));
        }
    }
}

public delegate void FlightPlansCompletedEventHandler(object sender, FlightPlansCompletedEventArgs args);

public partial class FlightStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FlightStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public FIDynamic Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((FIDynamic)(this.results[0]));
        }
    }
}

public delegate void FlightStatusCompletedEventHandler(object sender, FlightStatusCompletedEventArgs args);

public partial class FlightInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FlightInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public FIStatic Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((FIStatic)(this.results[0]));
        }
    }
}

public delegate void FlightInfoCompletedEventHandler(object sender, FlightInfoCompletedEventArgs args);

public partial class FlightPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FlightPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public adsPosition[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((adsPosition[])(this.results[0]));
        }
    }
}

public delegate void FlightPathCompletedEventHandler(object sender, FlightPathCompletedEventArgs args);

public partial class RegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public registry Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((registry)(this.results[0]));
        }
    }
}

public delegate void RegistrationCompletedEventHandler(object sender, RegistrationCompletedEventArgs args);

public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public FIStatic[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((FIStatic[])(this.results[0]));
        }
    }
}

public delegate void SearchCompletedEventHandler(object sender, SearchCompletedEventArgs args);

public partial class PhotoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PhotoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Photo[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Photo[])(this.results[0]));
        }
    }
}

public delegate void PhotoListCompletedEventHandler(object sender, PhotoListCompletedEventArgs args);

public partial class RecentFlightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RecentFlightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public PastFlight[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((PastFlight[])(this.results[0]));
        }
    }
}

public delegate void RecentFlightsCompletedEventHandler(object sender, RecentFlightsCompletedEventArgs args);

public partial class AirportsNearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AirportsNearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Airport[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Airport[])(this.results[0]));
        }
    }
}

public delegate void AirportsNearCompletedEventHandler(object sender, AirportsNearCompletedEventArgs args);

public partial class AirportsNearConventionalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AirportsNearConventionalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Airport[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Airport[])(this.results[0]));
        }
    }
}

public delegate void AirportsNearConventionalCompletedEventHandler(object sender, AirportsNearConventionalCompletedEventArgs args);

public partial class AirportInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AirportInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public Airport[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((Airport[])(this.results[0]));
        }
    }
}

public delegate void AirportInfoCompletedEventHandler(object sender, AirportInfoCompletedEventArgs args);

public partial class FlightsNearCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FlightsNearCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public FIStatic[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((FIStatic[])(this.results[0]));
        }
    }
}

public delegate void FlightsNearCompletedEventHandler(object sender, FlightsNearCompletedEventArgs args);
